-- Migration: Add Enrollment Management System Tables
-- Version: 1.0.0
-- Date: 2025-10-11
-- Description: Adds 5 new tables (inscriptions, documents, paiements, profil_utilisateurs, action_logs)
--              to existing sdb_cate.sqlite while preserving legacy tables
-- Requirements: FR-001 through FR-055

-- ==================================================
-- TABLE 1: inscriptions
-- ==================================================
-- Purpose: Enhanced enrollment records with OCR document processing and structured payment tracking
CREATE TABLE IF NOT EXISTS inscriptions (
    id TEXT PRIMARY KEY NOT NULL,
    numero_unique TEXT UNIQUE,  -- Generated by trigger: "CAT-YYYY-XXXX"
    parent_id TEXT NOT NULL,
    legacy_code_parent TEXT,  -- Link to parents_2.Code_Parent (migration support)
    legacy_catechumene_id TEXT,  -- Link to catechumenes_2.ID_Catechumene (re-enrollment)
    nom_enfant TEXT NOT NULL,
    prenom_enfant TEXT NOT NULL,
    date_naissance DATE NOT NULL,
    lieu_naissance TEXT NOT NULL,
    date_bapteme DATE,
    paroisse_bapteme TEXT,
    nom_pretre_bapteme TEXT,
    paroisse_origine TEXT,  -- For transfers (FR-005)
    annee_catechisme_precedente TEXT,  -- For transfers (FR-005)
    annee_catechetique TEXT NOT NULL,  -- Format: "2025-2026"
    niveau TEXT,  -- éveil, CE1, CE2, CM1, CM2, confirmation
    classe_id TEXT,  -- FK to classes.id (null until placement)
    statut TEXT NOT NULL DEFAULT 'brouillon',  -- brouillon, en_attente_paiement, paiement_partiel, active, annulee
    montant_total REAL NOT NULL,
    montant_paye REAL DEFAULT 0.0,
    solde_restant REAL GENERATED ALWAYS AS (montant_total - montant_paye) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    created_by TEXT NOT NULL,  -- FK to profil_utilisateurs.user_id
    validated_by TEXT,  -- FK to profil_utilisateurs.user_id (staff member)
    validated_at TIMESTAMP,

    -- Constraints
    CHECK (montant_total > 0),
    CHECK (montant_paye >= 0),
    CHECK (statut IN ('brouillon', 'en_attente_paiement', 'paiement_partiel', 'active', 'annulee')),
    CHECK (niveau IN ('éveil', 'CE1', 'CE2', 'CM1', 'CM2', 'confirmation') OR niveau IS NULL)
);

-- ==================================================
-- TABLE 2: documents
-- ==================================================
-- Purpose: Document metadata and OCR processing results (FR-002-006, FR-010)
CREATE TABLE IF NOT EXISTS documents (
    id TEXT PRIMARY KEY NOT NULL,
    inscription_id TEXT NOT NULL,
    type_document TEXT NOT NULL,  -- extrait_naissance, extrait_bapteme, attestation_transfert, preuve_paiement
    fichier_path TEXT NOT NULL,  -- MinIO path: {year}/{inscription_id}/{type}.{ext}
    format TEXT NOT NULL,  -- pdf, jpg, png, heic
    taille_bytes INTEGER NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    statut_ocr TEXT NOT NULL DEFAULT 'en_attente',  -- en_attente, en_cours, succes, echec, manuel
    donnees_extraites TEXT,  -- JSON: raw OCR data
    donnees_validees TEXT,  -- JSON: user-validated data (FR-006)
    confiance_ocr REAL,  -- 0.0-1.0
    valide_par_parent BOOLEAN DEFAULT FALSE,
    validated_at TIMESTAMP,
    error_message TEXT,  -- OCR error details if statut_ocr = echec

    -- Constraints
    CHECK (taille_bytes <= 10485760),  -- 10MB max (FR-002)
    CHECK (confiance_ocr BETWEEN 0.0 AND 1.0 OR confiance_ocr IS NULL),
    CHECK (format IN ('pdf', 'jpg', 'jpeg', 'png', 'heic')),
    CHECK (type_document IN ('extrait_naissance', 'extrait_bapteme', 'attestation_transfert', 'preuve_paiement')),
    CHECK (statut_ocr IN ('en_attente', 'en_cours', 'succes', 'echec', 'manuel')),

    FOREIGN KEY (inscription_id) REFERENCES inscriptions(id) ON DELETE CASCADE
);

-- ==================================================
-- TABLE 3: paiements
-- ==================================================
-- Purpose: Payment transactions with Mobile Money support (FR-011-020)
CREATE TABLE IF NOT EXISTS paiements (
    id TEXT PRIMARY KEY NOT NULL,
    inscription_id TEXT NOT NULL,
    montant REAL NOT NULL,
    mode_paiement TEXT NOT NULL,  -- cash, orange_money, wave, free_money, recu_papier
    reference TEXT,  -- Transaction ID or receipt number (FR-016)
    preuve_document_id TEXT,  -- FK to documents.id (payment proof screenshot)
    statut TEXT NOT NULL DEFAULT 'en_attente_validation',  -- en_attente_validation, valide, rejete
    soumis_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    valide_at TIMESTAMP,
    validateur_id TEXT,  -- FK to profil_utilisateurs.user_id (treasurer, FR-015)
    motif_rejet TEXT,  -- Rejection reason if statut = rejete (FR-015)
    metadata TEXT,  -- JSON: operator, point_vente, etc. (FR-016)

    -- Constraints
    CHECK (montant > 0),
    CHECK (mode_paiement IN ('cash', 'orange_money', 'wave', 'free_money', 'recu_papier')),
    CHECK (statut IN ('en_attente_validation', 'valide', 'rejete')),

    FOREIGN KEY (inscription_id) REFERENCES inscriptions(id) ON DELETE CASCADE,
    FOREIGN KEY (preuve_document_id) REFERENCES documents(id) ON DELETE SET NULL
);

-- ==================================================
-- TABLE 4: profil_utilisateurs
-- ==================================================
-- Purpose: Role-based user profiles with permissions (FR-021-032)
CREATE TABLE IF NOT EXISTS profil_utilisateurs (
    user_id TEXT PRIMARY KEY NOT NULL,
    nom TEXT NOT NULL,
    prenom TEXT NOT NULL,
    role TEXT NOT NULL,  -- 13 roles per FR-022
    telephone TEXT UNIQUE NOT NULL,  -- E.164 format
    email TEXT,
    canal_prefere TEXT NOT NULL,  -- whatsapp, telegram
    identifiant_canal TEXT NOT NULL,  -- WhatsApp/Telegram user ID
    code_parent_hash TEXT,  -- bcrypt hash (null for non-parent roles, FR-032)
    actif BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    derniere_connexion TIMESTAMP,
    permissions TEXT NOT NULL,  -- JSON: role-specific permissions (FR-023-029)
    metadata TEXT,  -- JSON: additional profile data

    -- Constraints
    CHECK (role IN (
        'super_admin', 'sacristain', 'cure', 'secretaire_cure',
        'president_bureau', 'secretaire_bureau', 'secretaire_adjoint_bureau',
        'tresorier_bureau', 'tresorier_adjoint_bureau',
        'responsable_organisation_bureau',
        'charge_relations_exterieures_bureau',
        'charge_relations_exterieures_adjoint_bureau',
        'catechiste', 'parent'
    )),
    CHECK (canal_prefere IN ('whatsapp', 'telegram'))
);

-- ==================================================
-- TABLE 5: action_logs
-- ==================================================
-- Purpose: Audit trail for GDPR compliance (FR-051-055)
CREATE TABLE IF NOT EXISTS action_logs (
    log_id TEXT PRIMARY KEY NOT NULL,
    user_id TEXT NOT NULL,
    action_type TEXT NOT NULL,  -- create_inscription, modify_inscription, upload_document, etc.
    entity_type TEXT NOT NULL,  -- inscription, paiement, document, profil
    entity_id TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ip_address TEXT,  -- Anonymized after 2 years (FR-055)
    user_agent TEXT,  -- Channel: whatsapp, telegram
    details TEXT,  -- JSON: action context (anonymized after 2 years)
    statut_action TEXT NOT NULL,  -- succes, echec
    error_message TEXT,  -- Error details if statut_action = echec

    -- Constraints
    CHECK (action_type IN (
        'create_inscription', 'modify_inscription', 'upload_document',
        'validate_ocr', 'submit_paiement', 'validate_paiement', 'reject_paiement',
        'modify_profil', 'access_data', 'unauthorized_access_attempt'
    )),
    CHECK (entity_type IN ('inscription', 'paiement', 'document', 'profil', 'classe')),
    CHECK (statut_action IN ('succes', 'echec')),

    FOREIGN KEY (user_id) REFERENCES profil_utilisateurs(user_id) ON DELETE SET NULL
);

-- ==================================================
-- INDEXES
-- ==================================================

-- inscriptions indexes (6)
CREATE INDEX IF NOT EXISTS idx_inscriptions_parent ON inscriptions(parent_id);
CREATE INDEX IF NOT EXISTS idx_inscriptions_numero ON inscriptions(numero_unique);
CREATE INDEX IF NOT EXISTS idx_inscriptions_statut ON inscriptions(statut);
CREATE INDEX IF NOT EXISTS idx_inscriptions_annee ON inscriptions(annee_catechetique);
CREATE INDEX IF NOT EXISTS idx_inscriptions_legacy_parent ON inscriptions(legacy_code_parent);
CREATE INDEX IF NOT EXISTS idx_inscriptions_legacy_catechumene ON inscriptions(legacy_catechumene_id);

-- documents indexes (3)
CREATE INDEX IF NOT EXISTS idx_documents_inscription ON documents(inscription_id);
CREATE INDEX IF NOT EXISTS idx_documents_type ON documents(type_document);
CREATE INDEX IF NOT EXISTS idx_documents_statut_ocr ON documents(statut_ocr);

-- paiements indexes (4)
CREATE INDEX IF NOT EXISTS idx_paiements_inscription ON paiements(inscription_id);
CREATE INDEX IF NOT EXISTS idx_paiements_statut ON paiements(statut);
CREATE INDEX IF NOT EXISTS idx_paiements_validateur ON paiements(validateur_id);
CREATE INDEX IF NOT EXISTS idx_paiements_date ON paiements(soumis_at);

-- profil_utilisateurs indexes (3)
CREATE INDEX IF NOT EXISTS idx_profil_telephone ON profil_utilisateurs(telephone);
CREATE INDEX IF NOT EXISTS idx_profil_role ON profil_utilisateurs(role);
CREATE INDEX IF NOT EXISTS idx_profil_canal ON profil_utilisateurs(identifiant_canal);

-- action_logs indexes (3)
CREATE INDEX IF NOT EXISTS idx_action_logs_user ON action_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_action_logs_timestamp ON action_logs(timestamp);
CREATE INDEX IF NOT EXISTS idx_action_logs_entity ON action_logs(entity_type, entity_id);

-- ==================================================
-- TRIGGERS
-- ==================================================

-- Trigger 1: Auto-update inscription.updated_at on modification
CREATE TRIGGER IF NOT EXISTS inscriptions_updated_at
AFTER UPDATE ON inscriptions
FOR EACH ROW
WHEN OLD.updated_at = NEW.updated_at  -- Only trigger if updated_at wasn't manually set
BEGIN
    UPDATE inscriptions SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
END;

-- Trigger 2: Auto-generate inscription.numero_unique if not provided
CREATE TRIGGER IF NOT EXISTS generate_numero_unique
AFTER INSERT ON inscriptions
FOR EACH ROW
WHEN NEW.numero_unique IS NULL
BEGIN
    UPDATE inscriptions SET numero_unique = (
        'CAT-' || strftime('%Y', 'now') || '-' ||
        printf('%04d', (
            SELECT COUNT(*) FROM inscriptions
            WHERE annee_catechetique = NEW.annee_catechetique
            AND id <= NEW.id
        ))
    ) WHERE id = NEW.id;
END;

-- Trigger 3: Update classe.effectif_actuel when inscription status changes to 'active'
-- Note: This trigger references the 'classes' table which already exists in sdb_cate.sqlite
CREATE TRIGGER IF NOT EXISTS update_classe_effectif_on_activation
AFTER UPDATE OF statut, classe_id ON inscriptions
FOR EACH ROW
WHEN NEW.statut = 'active' AND NEW.classe_id IS NOT NULL
BEGIN
    UPDATE classes SET effectif_actuel = (
        SELECT COUNT(*) FROM inscriptions
        WHERE classe_id = NEW.classe_id AND statut = 'active'
    ) WHERE id = NEW.classe_id;
END;

-- Trigger 4: Update classe.effectif_actuel when inscription status changes from 'active' to other
CREATE TRIGGER IF NOT EXISTS update_classe_effectif_on_deactivation
AFTER UPDATE OF statut ON inscriptions
FOR EACH ROW
WHEN OLD.statut = 'active' AND NEW.statut != 'active' AND NEW.classe_id IS NOT NULL
BEGIN
    UPDATE classes SET effectif_actuel = (
        SELECT COUNT(*) FROM inscriptions
        WHERE classe_id = NEW.classe_id AND statut = 'active'
    ) WHERE id = NEW.classe_id;
END;

-- ==================================================
-- MIGRATION VERIFICATION
-- ==================================================
-- The following queries can be run after migration to verify success:
-- SELECT name FROM sqlite_master WHERE type='table' AND name IN ('inscriptions', 'documents', 'paiements', 'profil_utilisateurs', 'action_logs');
-- SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%';
-- SELECT name FROM sqlite_master WHERE type='trigger' AND name IN ('inscriptions_updated_at', 'generate_numero_unique', 'update_classe_effectif_on_activation', 'update_classe_effectif_on_deactivation');

-- ==================================================
-- END OF MIGRATION
-- ==================================================
